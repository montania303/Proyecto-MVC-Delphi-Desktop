unit UDMCliente;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Data.SqlExpr, Data.DB,
  Datasnap.DBClient, Datasnap.Provider, UDMConexion, UClienteModel;

type
  TDMCliente = class(TDataModule)
    DSPBuscar: TDataSetProvider;
    CDSBuscar: TClientDataSet;
    SQLBuscar: TSQLDataSet;
    SQLActualizar: TSQLDataSet;
    SQLEliminar: TSQLDataSet;
    SQLInsertar: TSQLDataSet;
    CDSBuscarID: TIntegerField;
    CDSBuscarNOME: TStringField;
    CDSBuscarDATA_NASCIMENTO: TDateField;
    CDSBuscarIDADE: TLargeintField;
    CDSBuscarPAIS: TStringField;
    CDSBuscarTELEFONE: TStringField;
    CDSBuscarPROD_ATIVO: TIntegerField;
  private
    { Private declarations }
  public
    function GenerarID: Integer;
    procedure buscarCliente(Snombre: string);
    procedure cargaCliente(oCliente: TCliente; iCodigo: Integer);
    function InsertarCliente(oCliente: TCliente; out sErro: string): Boolean;
    function ActualizarCliente(oCliente: TCliente; out sErro: string): Boolean;
    function EliminarCliente(iCodigo: Integer; out sErro: string): Boolean;
    { Public declarations }
  end;

var
  DMCliente: TDMCliente;

implementation

{ %CLASSGROUP 'Vcl.Controls.TControl' }

{$R *.dfm}
{ TDataModule1 }

function TDMCliente.ActualizarCliente(oCliente: TCliente;
  out sErro: string): Boolean;
begin
  with SQLActualizar, oCliente do
  begin
    Params[0].AsInteger := Nombre;
    Params[1].AsInteger := Fecha_nacimiento;
    Params[2].AsInteger := Pais;
    Params[3].AsInteger := Telefono;
    Params[4].AsInteger := Id;
    try
      ExecSQL();
      Result := True;
    except
      on E: Exception do
      begin
        sErro := 'Error al intentar Actualizar los datos del cliente: ' +
          sLineBreak + E.Message;
        Result := False;
      end;

    end;
  end;

end;

procedure TDMCliente.buscarCliente(Snombre: string);
begin
  if CDSBuscar.Active then
  begin
    CDSBuscar.Close;
    CDSBuscar.Params[0].AsString := '%' + Snombre + '%';
    CDSBuscar.Open;
    CDSBuscar.First;
  end;

end;

procedure TDMCliente.cargaCliente(oCliente: TCliente; iCodigo: Integer);
var
  sqlCliente: TSQLDataSet;
begin
  sqlCliente.SQLConnection := TSQLDataSet.Create(nil);
  try
    with sqlCliente do
    begin
      sqlCliente.SQLConnection := DMConexion.SQLConnection;
      CommandText := 'select * from cliente where (id =' +
        IntToStr(iCodigo) + ')';
      Open;
      with oCliente do
      begin
        Id := FieldByName('id').AsInteger;
        Nombre := FieldByName('nome').AsInteger;
        Fecha_nacimiento := FieldByName('data_nascimento').AsInteger;
        Edad := FieldByName('idade').AsInteger;
        Pais := FieldByName('pais').AsInteger;
        Telefono := FieldByName('telefone').AsString;
      end;
    end;

  finally

  end;

end;

function TDMCliente.EliminarCliente(iCodigo: Integer;
  out sErro: string): Boolean;
begin
  with SQLEliminar do
  begin
    Params[0].AsInteger := iCodigo;
    try
      ExecSQL();
      Result := True;
    except
      on E: Exception do
      begin
        sErro := 'Error al intentar Eliminar el cliente' + sLineBreak +
          E.Message;
        Result := False;
      end;

    end;
  end;
end;

function TDMCliente.GenerarID: Integer;
var
  sqlSecuencia: TSQLDataSet;
begin
  sqlSecuencia := TSQLDataSet.Create(nil);
  try
    with sqlSecuencia do
    begin
      SQLConnection := DMConexion.SQLConnection;
      CommandText := 'Select coalese(max(id), 0) + 1 seq from cliente';
      Open;
      Result := sqlSecuencia.FieldByName('seq').AsInteger;
    end;
  finally
    FreeAndNil(sqlSecuencia);

  end;
end;

function TDMCliente.InsertarCliente(oCliente: TCliente;
  out sErro: string): Boolean;
begin
  with SQLInsertar, oCliente do
  begin
    Params[0].AsInteger := GenerarID();
    Params[1].AsInteger := Nombre;
    Params[2].AsInteger := Fecha_nacimiento;
    Params[3].AsInteger := Edad;
    Params[4].AsInteger := Pais;
    Params[5].AsInteger := Telefono;
    try
      ExecSQL();
      Result := True;
    except
      on E: Exception do
      begin
        sErro := 'Error al intentar realizar la inserción del cliente' +
          sLineBreak + E.Message;
        Result := False;
      end;

    end;
  end;
end;

end.
